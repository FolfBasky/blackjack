from aiogram import Bot, Dispatcher, executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from blackjack import BlackJack, GameStatesBlackdjack
from boombers import BombGame, GameStatesBoomber
import asyncio
import random
from config import token
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from DB import *

bot = Bot(token=token)
dp = Dispatcher(bot, storage=MemoryStorage())

markup = ReplyKeyboardMarkup(resize_keyboard=True)
markup1 = ReplyKeyboardMarkup(resize_keyboard=True)
markup.add(KeyboardButton("üé≤ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É üé≤"))
markup.add(KeyboardButton("üí∞–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Åüí∞"), KeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ üí∏"))
markup.add(KeyboardButton("üöπ –ü—Ä–æ—Ñ–∏–ª—å üöπ"), KeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ üèÜ"))
markup.add(KeyboardButton("üëì –û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ üëì"))
markup1.add(KeyboardButton("–í–∑—è—Ç—å –∫–∞—Ä—Ç—É"), KeyboardButton("–ü–∞—Å—Å"))

class Game(StatesGroup):
    choice = State()

class Main:
    def __init__(self):
        self.markup = ReplyKeyboardMarkup(resize_keyboard=True)
        self.markup.add(KeyboardButton('–ë–ª–µ–∫–î–∂–µ–∫'), KeyboardButton('–ë–æ–º–±–æ—á–∫–∏'))

    async def start(self, message: Message):
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:', reply_markup=self.markup)
        await Game.choice.set()

async def start(message: Message):
    await message.answer('–ò–≥—Ä–∞ –≤ BlackJack')
    await message.answer('–í –±–ª—ç–∫–¥–∂–µ–∫–µ –¥–µ—Å—è—Ç–∫–∏, –≤–∞–ª–µ—Ç—ã, –¥–∞–º—ã –∏ –∫–æ—Ä–æ–ª–∏ —Å—Ç–æ—è—Ç –ø–æ 10 –æ—á–∫–æ–≤.\n–¢—É–∑ —Å—Ç–æ–∏—Ç 11 –æ—á–∫–æ–≤\n–ó–∞–¥–∞—á–∞ –Ω–∞–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–æ–µ —á–∏—Å–ª–æ –æ—á–∫–æ–≤ –∫ 21, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–æ—Ä—â–∏—Ç—å —Å —ç—Ç–∏–º!',reply_markup=markup)

    add_or_update_user(message.from_user.id, message.from_user.first_name, 0, 1.0, 0, 0)

async def start_game(message: Message):
    increment_count_games(message.from_user.id)
    player_balance = get_user_info(message.from_user.id)[2]
    if player_balance < 100:
        await message.answer(f'–ë–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª ({player_balance}), –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ', reply_markup=markup)
        return None
    else:
        await message.answer(f'–ë–∞–ª–∞–Ω—Å {player_balance}')
        await GameStatesBlackdjack.game_started.set()

    global blackjack
    blackjack = BlackJack()

    await message.answer('–ò–≥—Ä–∞ –≤ BlackJack –Ω–∞—á–∞–ª–∞—Å—å', reply_markup=markup1)
    blackjack.take_card()
    await asyncio.sleep(0.1)
    global msgP, msgB
    msgP = await message.answer(f'–í–∞–º –ø–æ–ø–∞–ª–∞—Å—å –∫–∞—Ä—Ç–∞ - {str(blackjack.card) + random.choice(blackjack.card_suits)}\n–í–∞—à–µ –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤ = {blackjack.score}')

    blackjack.take_card_bot()
    await asyncio.sleep(0.1)
    msgB = await message.answer( f'–î–∏–ª–µ—Ä—É –ø–æ–ø–∞–ª–∞—Å—å –∫–∞—Ä—Ç–∞ - {str(blackjack.bot_card)  + random.choice(blackjack.card_suits)}\n–ö–æ–ª-–≤–æ –æ—á–∫–æ–≤ –¥–∏–ª–µ—Ä–∞ = {blackjack.bot_score}')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')

async def take_a_card(message: Message,state: FSMContext):
    result = get_user_info(message.from_user.id)
    player_balance = result[2]
    count_games = result[-2]
    wins = result[-1]

    blackjack.take_card()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    global editMessageP
    try:
        if editMessageP:
            val = str(editMessageP.text).split("\n")[0].split("-")[1].strip()
            val2 = str(editMessageP.text).split('\n')[1].replace('(','').replace(')','').strip()
            lst_cards = '('+ val + ' ' + val2 + ' ' + ')'
        else:
            val = str(msgP.text).split("\n")[0].split("-")[1].strip()
            lst_cards = f'({val})'
    except:
        val = str(msgP.text).split("\n")[0].split("-")[1].strip()
        lst_cards = f'({val})'

    ttx = f'–í–∞–º –ø–æ–ø–∞–ª–∞—Å—å –∫–∞—Ä—Ç–∞ - {str(blackjack.card) + random.choice(blackjack.card_suits)}\n{lst_cards}\n–í–∞—à–µ –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤ = {blackjack.score}'
    editMessageP = await bot.edit_message_text(chat_id=msgP.chat.id, message_id=msgP.message_id ,text=ttx)
    if blackjack.score > 21:
        await message.answer('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!', reply_markup=markup)
        player_balance -= 100
        await message.answer(f'–í–∞—à –±–∞–ª–∞–Ω—Å {player_balance}')
        await state.finish()
        editMessageP = None
    elif blackjack.score == 21:
        await message.answer('–£ –≤–∞—Å –±–ª–µ–∫–¥–∂–µ–∫!', reply_markup=markup)
        player_balance += 150
        wins += 1
        await message.answer(f'–í–∞—à –±–∞–ª–∞–Ω—Å {player_balance}')
        await state.finish()
        editMessageP = None


    update_user(message.from_user.id, message.from_user.first_name, player_balance,  round(wins/count_games,2), count_games, wins)

async def Pass(message: Message,state: FSMContext):
    result = get_user_info(message.from_user.id)
    player_balance = result[2]
    count_games = result[-2]
    wins = result[-1]
    global editMessageP
    editMessageP = None
    #await message.answer( f'–í–∞—à–µ –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤ = {blackjack.score}')
    while (blackjack.bot_score < 18):
        await asyncio.sleep(0.15)
        if blackjack.bot_score <= 18:
            blackjack.take_card_bot()

            global editMessageB
            try:
                if editMessageB:
                    val = str(editMessageB.text).split("\n")[0].split("-")[1].strip()
                    val2 = str(editMessageB.text).split('\n')[1].replace('(','').replace(')','').strip()
                    lst_cards = '('+ val + ' ' + val2 + ' ' + ')'
                else:
                    val = str(msgP.text).split("\n")[0].split("-")[1].strip()
                    lst_cards = f'({val})'
            except:
                val = str(msgB.text).split("\n")[0].split("-")[1].strip()
                lst_cards = f'({val})'

            ttx = f'–î–∏–ª–µ—Ä—É –ø–æ–ø–∞–ª–∞—Å—å –∫–∞—Ä—Ç–∞ - {str(blackjack.bot_card) + random.choice(blackjack.card_suits)}\n{lst_cards}\n–ö–æ–ª-–≤–æ –æ—á–∫–æ–≤ –¥–∏–ª–µ—Ä–∞ = {blackjack.bot_score}'
            editMessageB = await bot.edit_message_text(chat_id=msgB.chat.id, message_id=msgB.message_id ,text=ttx)

            if blackjack.bot_score > 21:
                await message.answer('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!', reply_markup=markup)
                player_balance += 100
                wins += 1
                await message.answer(f'–í–∞—à –±–∞–ª–∞–Ω—Å {player_balance}')
                await state.finish()
                update_user(message.from_user.id, message.from_user.first_name, player_balance, round(wins/count_games,2), count_games, wins)
                editMessageB = None
                return None


    if blackjack.score > blackjack.bot_score:
        await message.answer('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!', reply_markup=markup)
        player_balance += 100
        wins += 1
        await message.answer(f'–í–∞—à –±–∞–ª–∞–Ω—Å {player_balance}')
        await state.finish()
    elif blackjack.score == blackjack.bot_score:
        await message.answer('–ù–∏—á—å—è!',reply_markup=markup)
        await message.answer(f'–í–∞—à –±–∞–ª–∞–Ω—Å {player_balance}')
        await state.finish()
    else:
        await message.answer('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!',reply_markup=markup)
        player_balance -= 100
        await message.answer(f'–í–∞—à –±–∞–ª–∞–Ω—Å {player_balance}')
        await state.finish()

    update_user(message.from_user.id, message.from_user.first_name, player_balance, round(wins/count_games,2), count_games, wins)
    editMessageB = None

async def add_money(message: Message):
    player_balance = get_user_info(message.from_user.id)[2]
    player_balance += 1000
    await message.answer( '–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!')
    await message.answer( f'–ë–∞–ª–∞–Ω—Å = {player_balance}')

    update_user(message.from_user.id, message.from_user.first_name, player_balance, *get_user_info(message.from_user.id)[3:])

async def withdraw_money(message: Message):
    player_balance = get_user_info(message.from_user.id)[2]
    player_balance = 0
    await message.answer( '–í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω—ã!')
    await message.answer( f'–ë–∞–ª–∞–Ω—Å = {player_balance}')

    update_user(message.from_user.id, message.from_user.first_name, player_balance, *get_user_info(message.from_user.id)[3:])

async def get_profile_info(message: Message):
    await message.answer('–ë–∞–ª–∞–Ω—Å = {}, –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥ = {}, –∫–æ–ª-–≤–æ –∏–≥—Ä = {}'.format(*get_user_info(message.from_user.id)[2:-1]))

async def get_top10(message: Message):
    g = get_top_players()
    for i,x in enumerate(g):
        username, count_games, kd = x
        await message.answer(f'{i+1}. {username} - {count_games} –∏–≥—Ä (–ö–î = {kd})')

async def develop(message: Message):
    txt = '''Hi! I am a Russian developer and I have been writing in Python for almost 2 years. I have completed many courses and am writing my own projects. (They are shown in the profile) In parallel, I solve logical problems on sites such as codewars.com , codingame.com and others. I have worked with SQL, API, Flask, aiogram, http, regular strings, captchas, AI, images, sounds videos in python. I like to write bots for automating work with websites. I can make simple websites.'''
    await message.answer(txt)
    await message.answer('https://github.com/FolfBasky')

if __name__ == '__main__':
    main = Main()
    dp.register_message_handler(start,commands='start')

    dp.register_message_handler(start, text="–ë–ª–µ–∫–î–∂–µ–∫", state=Game.choice)
    dp.register_message_handler(start_game, text="üé≤ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É üé≤")
    dp.register_message_handler(take_a_card, text="–í–∑—è—Ç—å –∫–∞—Ä—Ç—É", state=GameStatesBlackdjack.game_started)
    dp.register_message_handler(Pass, text="–ü–∞—Å—Å", state=GameStatesBlackdjack.game_started)
    dp.register_message_handler(add_money, text="üí∞–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Åüí∞")
    dp.register_message_handler(withdraw_money, text="üí∏ –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ üí∏")
    dp.register_message_handler(get_profile_info, text="üöπ –ü—Ä–æ—Ñ–∏–ª—å üöπ")
    dp.register_message_handler(get_top10, text="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ üèÜ")
    dp.register_message_handler(develop, text="üëì –û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ üëì")

    boomber = BombGame()
    dp.register_message_handler(boomber.start, text="–ë–æ–º–±–æ—á–∫–∏", state=Game.choice)
    dp.callback_query_handler(boomber.process_choice, text="0,0", state=GameStatesBoomber.game_started)
    dp.register_message_handler(main.start, text="üîÉ –í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã üîÉ", state=GameStatesBoomber.main_page)

    executor.start_polling(dp, skip_updates=True)
